void KokkosFbou1(dstype* f, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uhg, const dstype* nlg, const dstype* tau, const dstype* uinf, const dstype* param, const dstype time, const int modelnumber, const int ng, const int nc, const int ncu, const int nd, const int ncx, const int nco, const int ncw)
{
	Kokkos::parallel_for("Fbou1", ng, KOKKOS_LAMBDA(const size_t i) {
		dstype param1 = param[0];
<<<<<<< Updated upstream
=======
		dstype param2 = param[1];
		dstype param3 = param[2];
		dstype param4 = param[3];
		dstype param10 = param[9];
>>>>>>> Stashed changes
		dstype tau1 = tau[0];
		dstype udg1 = udg[0*ng+i];
		dstype udg2 = udg[1*ng+i];
		dstype udg3 = udg[2*ng+i];
		dstype udg4 = udg[3*ng+i];
<<<<<<< Updated upstream
		dstype uhg1 = uhg[0*ng+i];
		dstype nlg1 = nlg[0*ng+i];
		dstype nlg2 = nlg[1*ng+i];
		dstype nlg3 = nlg[2*ng+i];
		f[0*ng+i] = tau1*(udg1-uhg1)+nlg1*param1*udg2+nlg2*param1*udg3+nlg3*param1*udg4;
=======
		dstype udg5 = udg[4*ng+i];
		dstype udg6 = udg[5*ng+i];
		dstype udg7 = udg[6*ng+i];
		dstype udg8 = udg[7*ng+i];
		dstype udg9 = udg[8*ng+i];
		dstype udg10 = udg[9*ng+i];
		dstype udg11 = udg[10*ng+i];
		dstype udg12 = udg[11*ng+i];
		dstype uhg1 = uhg[0*ng+i];
		dstype uhg2 = uhg[1*ng+i];
		dstype uhg3 = uhg[2*ng+i];
		dstype uhg4 = uhg[3*ng+i];
		dstype odg1 = odg[0*ng+i];
		dstype nlg1 = nlg[0*ng+i];
		dstype nlg2 = nlg[1*ng+i];
		dstype t2 = 1.0/3.141592653589793;
		dstype t3 = uhg1*1.0E3;
		dstype t4 = t3-1.0E1;
		dstype t5 = atan(t4);
		dstype t6 = t2*t5;
		dstype t7 = t6+1.0/2.0;
		dstype t8 = uhg1-1.0/1.0E2;
		dstype t9 = t7*t8*1.0E3;
		dstype t10 = t9+3.183097800805168E-1;
		dstype t14 = t7*t8;
		dstype t11 = t14+3.183097800805168E-4;
		dstype t12 = atan(t10);
		dstype t13 = t2*t12;
		dstype t15 = t11*t11;
		dstype t16 = t15*1.0E6;
		dstype t17 = t16+1.0;
		dstype t18 = 1.0/t17;
		dstype t19 = t2*t10*t18;
		dstype t20 = t13+t19+1.0/2.0;
		dstype t21 = t14+1.031830978008052E-2;
		dstype t22 = 1.0/(t21*t21);
		dstype t23 = uhg2*uhg2;
		dstype t24 = t22*t23*(1.0/2.0);
		dstype t25 = uhg3*uhg3;
		dstype t26 = t22*t25*(1.0/2.0);
		dstype t27 = t24+t26;
		dstype t31 = t21*t27;
		dstype t28 = -t31+uhg4;
		dstype t29 = param1-1.0;
		dstype t30 = 1.0/t21;
		dstype t32 = t28*t29*1.0E3;
		dstype t33 = t32-1.0;
		dstype t34 = atan(t33);
		dstype t35 = t2*t34;
		dstype t36 = t35+1.0/2.0;
		dstype t37 = t28*t29;
		dstype t38 = t37-1.0/1.0E3;
		dstype t39 = t36*t38;
		dstype t40 = param4*param4;
		dstype t41 = t39+1.318309780080517E-3;
		dstype t42 = 1.0/param2;
		dstype t43 = param1*param10*t30*t40*t41;
		dstype t44 = t43+5.52E2/5.0;
		dstype t45 = 1.0/t44;
		dstype t46 = param10+5.52E2/5.0;
		dstype t47 = param1*t30*t40*t41;
		dstype t48 = pow(t47,3.0/2.0);
		dstype t60 = t20*t30*udg5*uhg2;
		dstype t49 = -t60+udg6;
		dstype t62 = t20*t30*udg9*uhg3;
		dstype t50 = -t62+udg11;
		dstype t51 = t30*uhg2*uhg3;
		dstype t58 = t20*t30*udg5*uhg3;
		dstype t52 = -t58+udg7;
		dstype t53 = t30*t52;
		dstype t59 = t20*t30*udg9*uhg2;
		dstype t54 = -t59+udg10;
		dstype t55 = t30*t54;
		dstype t56 = t53+t55;
		dstype t57 = t42*t45*t46*t48*t56;
		dstype t61 = t30*t49*2.0;
		dstype t63 = t61-t30*t50;
		dstype t64 = t39+3.183097800805168E-4;
		dstype t65 = t36*t38*1.0E3;
		dstype t66 = t65+3.183097800805168E-1;
		dstype t67 = t30*uhg4;
		dstype t68 = t30*t41;
		dstype t69 = t67+t68;
		dstype t70 = t30*t49;
		dstype t71 = t70-t30*t50*2.0;
		dstype t72 = 1.0/param3;
		dstype t73 = atan(t66);
		dstype t74 = t2*t73;
		dstype t75 = t64*t64;
		dstype t76 = t75*1.0E6;
		dstype t77 = t76+1.0;
		dstype t78 = 1.0/t77;
		dstype t79 = t2*t66*t78;
		dstype t80 = t74+t79+1.0/2.0;
		dstype t81 = 1.0/t29;
		f[0*ng+i] = nlg1*(uhg2+odg1*t20*udg5)+nlg2*(uhg3+odg1*t20*udg9)+tau1*(udg1-uhg1);
		f[1*ng+i] = nlg1*(t39+odg1*udg6+t23*t30+t42*t45*t46*t48*t63*(2.0/3.0)+1.318309780080517E-3)+nlg2*(t51+t57+odg1*udg10)+tau1*(udg2-uhg2);
		f[2*ng+i] = nlg2*(t39+odg1*udg11+t25*t30-t42*t45*t46*t48*t71*(2.0/3.0)+1.318309780080517E-3)+nlg1*(t51+t57+odg1*udg7)+tau1*(udg3-uhg3);
		f[3*ng+i] = nlg1*(odg1*udg8+t69*uhg2+t30*t42*t45*t46*t48*t56*uhg3+t30*t42*t45*t46*t48*t63*uhg2*(2.0/3.0)-param1*t22*t42*t45*t46*t48*t72*t81*(t20*t41*udg5+t21*t29*t80*(-udg8+t21*(t22*t49*uhg2+t22*t52*uhg3)+t20*t27*udg5)))+nlg2*(odg1*udg12+t69*uhg3+t30*t42*t45*t46*t48*t56*uhg2-t30*t42*t45*t46*t48*t71*uhg3*(2.0/3.0)-param1*t22*t42*t45*t46*t48*t72*t81*(t20*t41*udg9+t21*t29*t80*(-udg12+t21*(t22*t50*uhg3+t22*t54*uhg2)+t20*t27*udg9)))+tau1*(udg4-uhg4);
	});
}

void KokkosFbou2(dstype* f, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uhg, const dstype* nlg, const dstype* tau, const dstype* uinf, const dstype* param, const dstype time, const int modelnumber, const int ng, const int nc, const int ncu, const int nd, const int ncx, const int nco, const int ncw)
{
	Kokkos::parallel_for("Fbou2", ng, KOKKOS_LAMBDA(const size_t i) {
		dstype param1 = param[0];
		dstype param2 = param[1];
		dstype param4 = param[3];
		dstype param10 = param[9];
		dstype tau1 = tau[0];
		dstype udg1 = udg[0*ng+i];
		dstype udg2 = udg[1*ng+i];
		dstype udg3 = udg[2*ng+i];
		dstype udg5 = udg[4*ng+i];
		dstype udg6 = udg[5*ng+i];
		dstype udg7 = udg[6*ng+i];
		dstype udg9 = udg[8*ng+i];
		dstype udg10 = udg[9*ng+i];
		dstype udg11 = udg[10*ng+i];
		dstype uhg1 = uhg[0*ng+i];
		dstype uhg2 = uhg[1*ng+i];
		dstype uhg3 = uhg[2*ng+i];
		dstype uhg4 = uhg[3*ng+i];
		dstype odg1 = odg[0*ng+i];
		dstype nlg1 = nlg[0*ng+i];
		dstype nlg2 = nlg[1*ng+i];
		dstype t2 = 1.0/3.141592653589793;
		dstype t3 = uhg1*1.0E3;
		dstype t4 = t3-1.0E1;
		dstype t5 = atan(t4);
		dstype t6 = t2*t5;
		dstype t7 = t6+1.0/2.0;
		dstype t8 = uhg1-1.0/1.0E2;
		dstype t9 = t7*t8;
		dstype t10 = t9+1.031830978008052E-2;
		dstype t11 = 1.0/(t10*t10);
		dstype t12 = uhg2*uhg2;
		dstype t13 = t11*t12*(1.0/2.0);
		dstype t14 = uhg3*uhg3;
		dstype t15 = t11*t14*(1.0/2.0);
		dstype t16 = t13+t15;
		dstype t31 = t10*t16;
		dstype t17 = -t31+uhg4;
		dstype t18 = param1-1.0;
		dstype t19 = 1.0/t10;
		dstype t20 = t7*t8*1.0E3;
		dstype t21 = t20+3.183097800805168E-1;
		dstype t22 = t9+3.183097800805168E-4;
		dstype t23 = atan(t21);
		dstype t24 = t2*t23;
		dstype t25 = t22*t22;
		dstype t26 = t25*1.0E6;
		dstype t27 = t26+1.0;
		dstype t28 = 1.0/t27;
		dstype t29 = t2*t21*t28;
		dstype t30 = t24+t29+1.0/2.0;
		dstype t32 = t17*t18*1.0E3;
		dstype t33 = t32-1.0;
		dstype t34 = atan(t33);
		dstype t35 = t2*t34;
		dstype t36 = t35+1.0/2.0;
		dstype t37 = t17*t18;
		dstype t38 = t37-1.0/1.0E3;
		dstype t39 = t36*t38;
		dstype t40 = param4*param4;
		dstype t41 = t39+1.318309780080517E-3;
		dstype t42 = 1.0/param2;
		dstype t43 = param1*param10*t19*t40*t41;
		dstype t44 = t43+5.52E2/5.0;
		dstype t45 = 1.0/t44;
		dstype t46 = param10+5.52E2/5.0;
		dstype t47 = param1*t19*t40*t41;
		dstype t48 = pow(t47,3.0/2.0);
		dstype t49 = udg6-t19*t30*udg5*uhg2;
		dstype t50 = udg11-t19*t30*udg9*uhg3;
		dstype t51 = t19*uhg2*uhg3;
		dstype t52 = udg7-t19*t30*udg5*uhg3;
		dstype t53 = t19*t52;
		dstype t54 = udg10-t19*t30*udg9*uhg2;
		dstype t55 = t19*t54;
		dstype t56 = t53+t55;
		dstype t57 = t42*t45*t46*t48*t56;
		f[0*ng+i] = 0.0;
		f[1*ng+i] = nlg2*(t51+t57+odg1*udg10)+tau1*(udg2-uhg2)+nlg1*(t39+odg1*udg6+t12*t19+t42*t45*t46*t48*(t19*t49*2.0-t19*t50)*(2.0/3.0)+1.318309780080517E-3);
		f[2*ng+i] = nlg1*(t51+t57+odg1*udg7)+tau1*(udg3-uhg3)+nlg2*(t39+odg1*udg11+t14*t19-t42*t45*t46*t48*(t19*t49-t19*t50*2.0)*(2.0/3.0)+1.318309780080517E-3);
		f[3*ng+i] = 0.0;
	});
}

void KokkosFbou3(dstype* f, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uhg, const dstype* nlg, const dstype* tau, const dstype* uinf, const dstype* param, const dstype time, const int modelnumber, const int ng, const int nc, const int ncu, const int nd, const int ncx, const int nco, const int ncw)
{
	Kokkos::parallel_for("Fbou3", ng, KOKKOS_LAMBDA(const size_t i) {
		dstype param1 = param[0];
		dstype param2 = param[1];
		dstype param3 = param[2];
		dstype param4 = param[3];
		dstype param10 = param[9];
		dstype tau1 = tau[0];
		dstype udg1 = udg[0*ng+i];
		dstype udg2 = udg[1*ng+i];
		dstype udg3 = udg[2*ng+i];
		dstype udg4 = udg[3*ng+i];
		dstype udg5 = udg[4*ng+i];
		dstype udg6 = udg[5*ng+i];
		dstype udg7 = udg[6*ng+i];
		dstype udg8 = udg[7*ng+i];
		dstype udg9 = udg[8*ng+i];
		dstype udg10 = udg[9*ng+i];
		dstype udg11 = udg[10*ng+i];
		dstype udg12 = udg[11*ng+i];
		dstype uhg1 = uhg[0*ng+i];
		dstype uhg2 = uhg[1*ng+i];
		dstype uhg3 = uhg[2*ng+i];
		dstype uhg4 = uhg[3*ng+i];
		dstype odg1 = odg[0*ng+i];
		dstype nlg1 = nlg[0*ng+i];
		dstype nlg2 = nlg[1*ng+i];
		dstype t2 = 1.0/3.141592653589793;
		dstype t3 = uhg1*1.0E3;
		dstype t4 = t3-1.0E1;
		dstype t5 = atan(t4);
		dstype t6 = t2*t5;
		dstype t7 = t6+1.0/2.0;
		dstype t8 = uhg1-1.0/1.0E2;
		dstype t9 = t7*t8;
		dstype t10 = t9+1.031830978008052E-2;
		dstype t11 = 1.0/(t10*t10);
		dstype t12 = uhg2*uhg2;
		dstype t13 = t11*t12*(1.0/2.0);
		dstype t14 = uhg3*uhg3;
		dstype t15 = t11*t14*(1.0/2.0);
		dstype t16 = t13+t15;
		dstype t31 = t10*t16;
		dstype t17 = -t31+uhg4;
		dstype t18 = param1-1.0;
		dstype t19 = 1.0/t10;
		dstype t20 = t7*t8*1.0E3;
		dstype t21 = t20+3.183097800805168E-1;
		dstype t22 = t9+3.183097800805168E-4;
		dstype t23 = atan(t21);
		dstype t24 = t2*t23;
		dstype t25 = t22*t22;
		dstype t26 = t25*1.0E6;
		dstype t27 = t26+1.0;
		dstype t28 = 1.0/t27;
		dstype t29 = t2*t21*t28;
		dstype t30 = t24+t29+1.0/2.0;
		dstype t32 = t17*t18*1.0E3;
		dstype t33 = t32-1.0;
		dstype t34 = atan(t33);
		dstype t35 = t2*t34;
		dstype t36 = t35+1.0/2.0;
		dstype t37 = t17*t18;
		dstype t38 = t37-1.0/1.0E3;
		dstype t39 = t36*t38;
		dstype t40 = param4*param4;
		dstype t41 = t39+1.318309780080517E-3;
		dstype t42 = 1.0/param2;
		dstype t43 = param1*param10*t19*t40*t41;
		dstype t44 = t43+5.52E2/5.0;
		dstype t45 = 1.0/t44;
		dstype t46 = param10+5.52E2/5.0;
		dstype t47 = param1*t19*t40*t41;
		dstype t48 = pow(t47,3.0/2.0);
		dstype t60 = t19*t30*udg5*uhg2;
		dstype t49 = -t60+udg6;
		dstype t62 = t19*t30*udg9*uhg3;
		dstype t50 = -t62+udg11;
		dstype t51 = t19*uhg2*uhg3;
		dstype t58 = t19*t30*udg5*uhg3;
		dstype t52 = -t58+udg7;
		dstype t53 = t19*t52;
		dstype t59 = t19*t30*udg9*uhg2;
		dstype t54 = -t59+udg10;
		dstype t55 = t19*t54;
		dstype t56 = t53+t55;
		dstype t57 = t42*t45*t46*t48*t56;
		dstype t61 = t19*t49*2.0;
		dstype t63 = t61-t19*t50;
		dstype t64 = t39+3.183097800805168E-4;
		dstype t65 = t36*t38*1.0E3;
		dstype t66 = t65+3.183097800805168E-1;
		dstype t67 = t19*uhg4;
		dstype t68 = t19*t41;
		dstype t69 = t67+t68;
		dstype t70 = t19*t49;
		dstype t71 = t70-t19*t50*2.0;
		dstype t72 = 1.0/param3;
		dstype t73 = atan(t66);
		dstype t74 = t2*t73;
		dstype t75 = t64*t64;
		dstype t76 = t75*1.0E6;
		dstype t77 = t76+1.0;
		dstype t78 = 1.0/t77;
		dstype t79 = t2*t66*t78;
		dstype t80 = t74+t79+1.0/2.0;
		dstype t81 = 1.0/t18;
		f[0*ng+i] = 0.0;
		f[1*ng+i] = nlg1*(t39+odg1*udg6+t12*t19+t42*t45*t46*t48*t63*(2.0/3.0)+1.318309780080517E-3)+nlg2*(t51+t57+odg1*udg10)+tau1*(udg2-uhg2);
		f[2*ng+i] = nlg2*(t39+odg1*udg11+t14*t19-t42*t45*t46*t48*t71*(2.0/3.0)+1.318309780080517E-3)+nlg1*(t51+t57+odg1*udg7)+tau1*(udg3-uhg3);
		f[3*ng+i] = nlg1*(odg1*udg8+t69*uhg2+t19*t42*t45*t46*t48*t56*uhg3+t19*t42*t45*t46*t48*t63*uhg2*(2.0/3.0)-param1*t11*t42*t45*t46*t48*t72*t81*(t30*t41*udg5+t10*t18*t80*(-udg8+t10*(t11*t49*uhg2+t11*t52*uhg3)+t16*t30*udg5)))+nlg2*(odg1*udg12+t69*uhg3+t19*t42*t45*t46*t48*t56*uhg2-t19*t42*t45*t46*t48*t71*uhg3*(2.0/3.0)-param1*t11*t42*t45*t46*t48*t72*t81*(t30*t41*udg9+t10*t18*t80*(-udg12+t10*(t11*t50*uhg3+t11*t54*uhg2)+t16*t30*udg9)))+tau1*(udg4-uhg4);
	});
}

void KokkosFbou4(dstype* f, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uhg, const dstype* nlg, const dstype* tau, const dstype* uinf, const dstype* param, const dstype time, const int modelnumber, const int ng, const int nc, const int ncu, const int nd, const int ncx, const int nco, const int ncw)
{
	Kokkos::parallel_for("Fbou4", ng, KOKKOS_LAMBDA(const size_t i) {
		dstype param1 = param[0];
		dstype param2 = param[1];
		dstype param4 = param[3];
		dstype param10 = param[9];
		dstype tau1 = tau[0];
		dstype udg1 = udg[0*ng+i];
		dstype udg2 = udg[1*ng+i];
		dstype udg3 = udg[2*ng+i];
		dstype udg5 = udg[4*ng+i];
		dstype udg6 = udg[5*ng+i];
		dstype udg7 = udg[6*ng+i];
		dstype udg9 = udg[8*ng+i];
		dstype udg10 = udg[9*ng+i];
		dstype udg11 = udg[10*ng+i];
		dstype uhg1 = uhg[0*ng+i];
		dstype uhg2 = uhg[1*ng+i];
		dstype uhg3 = uhg[2*ng+i];
		dstype uhg4 = uhg[3*ng+i];
		dstype odg1 = odg[0*ng+i];
		dstype nlg1 = nlg[0*ng+i];
		dstype nlg2 = nlg[1*ng+i];
		dstype t2 = 1.0/3.141592653589793;
		dstype t3 = uhg1*1.0E3;
		dstype t4 = t3-1.0E1;
		dstype t5 = atan(t4);
		dstype t6 = t2*t5;
		dstype t7 = t6+1.0/2.0;
		dstype t8 = uhg1-1.0/1.0E2;
		dstype t9 = t7*t8;
		dstype t10 = t9+1.031830978008052E-2;
		dstype t11 = 1.0/(t10*t10);
		dstype t12 = uhg2*uhg2;
		dstype t13 = t11*t12*(1.0/2.0);
		dstype t14 = uhg3*uhg3;
		dstype t15 = t11*t14*(1.0/2.0);
		dstype t16 = t13+t15;
		dstype t31 = t10*t16;
		dstype t17 = -t31+uhg4;
		dstype t18 = param1-1.0;
		dstype t19 = 1.0/t10;
		dstype t20 = t7*t8*1.0E3;
		dstype t21 = t20+3.183097800805168E-1;
		dstype t22 = t9+3.183097800805168E-4;
		dstype t23 = atan(t21);
		dstype t24 = t2*t23;
		dstype t25 = t22*t22;
		dstype t26 = t25*1.0E6;
		dstype t27 = t26+1.0;
		dstype t28 = 1.0/t27;
		dstype t29 = t2*t21*t28;
		dstype t30 = t24+t29+1.0/2.0;
		dstype t32 = t17*t18*1.0E3;
		dstype t33 = t32-1.0;
		dstype t34 = atan(t33);
		dstype t35 = t2*t34;
		dstype t36 = t35+1.0/2.0;
		dstype t37 = t17*t18;
		dstype t38 = t37-1.0/1.0E3;
		dstype t39 = t36*t38;
		dstype t40 = param4*param4;
		dstype t41 = t39+1.318309780080517E-3;
		dstype t42 = 1.0/param2;
		dstype t43 = param1*param10*t19*t40*t41;
		dstype t44 = t43+5.52E2/5.0;
		dstype t45 = 1.0/t44;
		dstype t46 = param10+5.52E2/5.0;
		dstype t47 = param1*t19*t40*t41;
		dstype t48 = pow(t47,3.0/2.0);
		dstype t49 = udg6-t19*t30*udg5*uhg2;
		dstype t50 = udg11-t19*t30*udg9*uhg3;
		dstype t51 = t19*uhg2*uhg3;
		dstype t52 = udg7-t19*t30*udg5*uhg3;
		dstype t53 = t19*t52;
		dstype t54 = udg10-t19*t30*udg9*uhg2;
		dstype t55 = t19*t54;
		dstype t56 = t53+t55;
		dstype t57 = t42*t45*t46*t48*t56;
		f[0*ng+i] = 0.0;
		f[1*ng+i] = nlg2*(t51+t57+odg1*udg10)+tau1*(udg2-uhg2)+nlg1*(t39+odg1*udg6+t12*t19+t42*t45*t46*t48*(t19*t49*2.0-t19*t50)*(2.0/3.0)+1.318309780080517E-3);
		f[2*ng+i] = nlg1*(t51+t57+odg1*udg7)+tau1*(udg3-uhg3)+nlg2*(t39+odg1*udg11+t14*t19-t42*t45*t46*t48*(t19*t49-t19*t50*2.0)*(2.0/3.0)+1.318309780080517E-3);
		f[3*ng+i] = 0.0;
	});
}

void KokkosFbou5(dstype* f, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uhg, const dstype* nlg, const dstype* tau, const dstype* uinf, const dstype* param, const dstype time, const int modelnumber, const int ng, const int nc, const int ncu, const int nd, const int ncx, const int nco, const int ncw)
{
	Kokkos::parallel_for("Fbou5", ng, KOKKOS_LAMBDA(const size_t i) {
		dstype param1 = param[0];
		dstype param2 = param[1];
		dstype param3 = param[2];
		dstype param4 = param[3];
		dstype param10 = param[9];
		dstype tau1 = tau[0];
		dstype udg1 = udg[0*ng+i];
		dstype udg2 = udg[1*ng+i];
		dstype udg3 = udg[2*ng+i];
		dstype udg4 = udg[3*ng+i];
		dstype udg5 = udg[4*ng+i];
		dstype udg6 = udg[5*ng+i];
		dstype udg7 = udg[6*ng+i];
		dstype udg8 = udg[7*ng+i];
		dstype udg9 = udg[8*ng+i];
		dstype udg10 = udg[9*ng+i];
		dstype udg11 = udg[10*ng+i];
		dstype udg12 = udg[11*ng+i];
		dstype uhg1 = uhg[0*ng+i];
		dstype uhg2 = uhg[1*ng+i];
		dstype uhg3 = uhg[2*ng+i];
		dstype uhg4 = uhg[3*ng+i];
		dstype odg1 = odg[0*ng+i];
		dstype nlg1 = nlg[0*ng+i];
		dstype nlg2 = nlg[1*ng+i];
		dstype t2 = 1.0/3.141592653589793;
		dstype t3 = uhg1*1.0E3;
		dstype t4 = t3-1.0E1;
		dstype t5 = atan(t4);
		dstype t6 = t2*t5;
		dstype t7 = t6+1.0/2.0;
		dstype t8 = uhg1-1.0/1.0E2;
		dstype t9 = t7*t8*1.0E3;
		dstype t10 = t9+3.183097800805168E-1;
		dstype t14 = t7*t8;
		dstype t11 = t14+3.183097800805168E-4;
		dstype t12 = atan(t10);
		dstype t13 = t2*t12;
		dstype t15 = t11*t11;
		dstype t16 = t15*1.0E6;
		dstype t17 = t16+1.0;
		dstype t18 = 1.0/t17;
		dstype t19 = t2*t10*t18;
		dstype t20 = t13+t19+1.0/2.0;
		dstype t21 = t14+1.031830978008052E-2;
		dstype t22 = 1.0/(t21*t21);
		dstype t23 = uhg2*uhg2;
		dstype t24 = t22*t23*(1.0/2.0);
		dstype t25 = uhg3*uhg3;
		dstype t26 = t22*t25*(1.0/2.0);
		dstype t27 = t24+t26;
		dstype t31 = t21*t27;
		dstype t28 = -t31+uhg4;
		dstype t29 = param1-1.0;
		dstype t30 = 1.0/t21;
		dstype t32 = t28*t29*1.0E3;
		dstype t33 = t32-1.0;
		dstype t34 = atan(t33);
		dstype t35 = t2*t34;
		dstype t36 = t35+1.0/2.0;
		dstype t37 = t28*t29;
		dstype t38 = t37-1.0/1.0E3;
		dstype t39 = t36*t38;
		dstype t40 = param4*param4;
		dstype t41 = t39+1.318309780080517E-3;
		dstype t42 = 1.0/param2;
		dstype t43 = param1*param10*t30*t40*t41;
		dstype t44 = t43+5.52E2/5.0;
		dstype t45 = 1.0/t44;
		dstype t46 = param10+5.52E2/5.0;
		dstype t47 = param1*t30*t40*t41;
		dstype t48 = pow(t47,3.0/2.0);
		dstype t60 = t20*t30*udg5*uhg2;
		dstype t49 = -t60+udg6;
		dstype t62 = t20*t30*udg9*uhg3;
		dstype t50 = -t62+udg11;
		dstype t51 = t30*uhg2*uhg3;
		dstype t58 = t20*t30*udg5*uhg3;
		dstype t52 = -t58+udg7;
		dstype t53 = t30*t52;
		dstype t59 = t20*t30*udg9*uhg2;
		dstype t54 = -t59+udg10;
		dstype t55 = t30*t54;
		dstype t56 = t53+t55;
		dstype t57 = t42*t45*t46*t48*t56;
		dstype t61 = t30*t49*2.0;
		dstype t63 = t61-t30*t50;
		dstype t64 = t39+3.183097800805168E-4;
		dstype t65 = t36*t38*1.0E3;
		dstype t66 = t65+3.183097800805168E-1;
		dstype t67 = t30*uhg4;
		dstype t68 = t30*t41;
		dstype t69 = t67+t68;
		dstype t70 = t30*t49;
		dstype t71 = t70-t30*t50*2.0;
		dstype t72 = 1.0/param3;
		dstype t73 = atan(t66);
		dstype t74 = t2*t73;
		dstype t75 = t64*t64;
		dstype t76 = t75*1.0E6;
		dstype t77 = t76+1.0;
		dstype t78 = 1.0/t77;
		dstype t79 = t2*t66*t78;
		dstype t80 = t74+t79+1.0/2.0;
		dstype t81 = 1.0/t29;
		f[0*ng+i] = nlg1*(uhg2+odg1*t20*udg5)+nlg2*(uhg3+odg1*t20*udg9)+tau1*(udg1-uhg1);
		f[1*ng+i] = nlg1*(t39+odg1*udg6+t23*t30+t42*t45*t46*t48*t63*(2.0/3.0)+1.318309780080517E-3)+nlg2*(t51+t57+odg1*udg10)+tau1*(udg2-uhg2);
		f[2*ng+i] = nlg2*(t39+odg1*udg11+t25*t30-t42*t45*t46*t48*t71*(2.0/3.0)+1.318309780080517E-3)+nlg1*(t51+t57+odg1*udg7)+tau1*(udg3-uhg3);
		f[3*ng+i] = nlg1*(odg1*udg8+t69*uhg2+t30*t42*t45*t46*t48*t56*uhg3+t30*t42*t45*t46*t48*t63*uhg2*(2.0/3.0)-param1*t22*t42*t45*t46*t48*t72*t81*(t20*t41*udg5+t21*t29*t80*(-udg8+t21*(t22*t49*uhg2+t22*t52*uhg3)+t20*t27*udg5)))+nlg2*(odg1*udg12+t69*uhg3+t30*t42*t45*t46*t48*t56*uhg2-t30*t42*t45*t46*t48*t71*uhg3*(2.0/3.0)-param1*t22*t42*t45*t46*t48*t72*t81*(t20*t41*udg9+t21*t29*t80*(-udg12+t21*(t22*t50*uhg3+t22*t54*uhg2)+t20*t27*udg9)))+tau1*(udg4-uhg4);
	});
}

void KokkosFbou6(dstype* f, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uhg, const dstype* nlg, const dstype* tau, const dstype* uinf, const dstype* param, const dstype time, const int modelnumber, const int ng, const int nc, const int ncu, const int nd, const int ncx, const int nco, const int ncw)
{
	Kokkos::parallel_for("Fbou6", ng, KOKKOS_LAMBDA(const size_t i) {
		dstype param1 = param[0];
		dstype param2 = param[1];
		dstype param3 = param[2];
		dstype param4 = param[3];
		dstype param10 = param[9];
		dstype tau1 = tau[0];
		dstype udg1 = udg[0*ng+i];
		dstype udg2 = udg[1*ng+i];
		dstype udg3 = udg[2*ng+i];
		dstype udg4 = udg[3*ng+i];
		dstype udg5 = udg[4*ng+i];
		dstype udg6 = udg[5*ng+i];
		dstype udg7 = udg[6*ng+i];
		dstype udg8 = udg[7*ng+i];
		dstype udg9 = udg[8*ng+i];
		dstype udg10 = udg[9*ng+i];
		dstype udg11 = udg[10*ng+i];
		dstype udg12 = udg[11*ng+i];
		dstype uhg1 = uhg[0*ng+i];
		dstype uhg2 = uhg[1*ng+i];
		dstype uhg3 = uhg[2*ng+i];
		dstype uhg4 = uhg[3*ng+i];
		dstype odg1 = odg[0*ng+i];
		dstype nlg1 = nlg[0*ng+i];
		dstype nlg2 = nlg[1*ng+i];
		dstype t2 = 1.0/3.141592653589793;
		dstype t3 = uhg1*1.0E3;
		dstype t4 = t3-1.0E1;
		dstype t5 = atan(t4);
		dstype t6 = t2*t5;
		dstype t7 = t6+1.0/2.0;
		dstype t8 = uhg1-1.0/1.0E2;
		dstype t9 = t7*t8*1.0E3;
		dstype t10 = t9+3.183097800805168E-1;
		dstype t14 = t7*t8;
		dstype t11 = t14+3.183097800805168E-4;
		dstype t12 = atan(t10);
		dstype t13 = t2*t12;
		dstype t15 = t11*t11;
		dstype t16 = t15*1.0E6;
		dstype t17 = t16+1.0;
		dstype t18 = 1.0/t17;
		dstype t19 = t2*t10*t18;
		dstype t20 = t13+t19+1.0/2.0;
		dstype t21 = t14+1.031830978008052E-2;
		dstype t22 = 1.0/(t21*t21);
		dstype t23 = uhg2*uhg2;
		dstype t24 = t22*t23*(1.0/2.0);
		dstype t25 = uhg3*uhg3;
		dstype t26 = t22*t25*(1.0/2.0);
		dstype t27 = t24+t26;
		dstype t31 = t21*t27;
		dstype t28 = -t31+uhg4;
		dstype t29 = param1-1.0;
		dstype t30 = 1.0/t21;
		dstype t32 = t28*t29*1.0E3;
		dstype t33 = t32-1.0;
		dstype t34 = atan(t33);
		dstype t35 = t2*t34;
		dstype t36 = t35+1.0/2.0;
		dstype t37 = t28*t29;
		dstype t38 = t37-1.0/1.0E3;
		dstype t39 = t36*t38;
		dstype t40 = param4*param4;
		dstype t41 = t39+1.318309780080517E-3;
		dstype t42 = 1.0/param2;
		dstype t43 = param1*param10*t30*t40*t41;
		dstype t44 = t43+5.52E2/5.0;
		dstype t45 = 1.0/t44;
		dstype t46 = param10+5.52E2/5.0;
		dstype t47 = param1*t30*t40*t41;
		dstype t48 = pow(t47,3.0/2.0);
		dstype t60 = t20*t30*udg5*uhg2;
		dstype t49 = -t60+udg6;
		dstype t62 = t20*t30*udg9*uhg3;
		dstype t50 = -t62+udg11;
		dstype t51 = t30*uhg2*uhg3;
		dstype t58 = t20*t30*udg5*uhg3;
		dstype t52 = -t58+udg7;
		dstype t53 = t30*t52;
		dstype t59 = t20*t30*udg9*uhg2;
		dstype t54 = -t59+udg10;
		dstype t55 = t30*t54;
		dstype t56 = t53+t55;
		dstype t57 = t42*t45*t46*t48*t56;
		dstype t61 = t30*t49*2.0;
		dstype t63 = t61-t30*t50;
		dstype t64 = t39+3.183097800805168E-4;
		dstype t65 = t36*t38*1.0E3;
		dstype t66 = t65+3.183097800805168E-1;
		dstype t67 = t30*uhg4;
		dstype t68 = t30*t41;
		dstype t69 = t67+t68;
		dstype t70 = t30*t49;
		dstype t71 = t70-t30*t50*2.0;
		dstype t72 = 1.0/param3;
		dstype t73 = atan(t66);
		dstype t74 = t2*t73;
		dstype t75 = t64*t64;
		dstype t76 = t75*1.0E6;
		dstype t77 = t76+1.0;
		dstype t78 = 1.0/t77;
		dstype t79 = t2*t66*t78;
		dstype t80 = t74+t79+1.0/2.0;
		dstype t81 = 1.0/t29;
		f[0*ng+i] = nlg1*(uhg2+odg1*t20*udg5)+nlg2*(uhg3+odg1*t20*udg9)+tau1*(udg1-uhg1);
		f[1*ng+i] = nlg1*(t39+odg1*udg6+t23*t30+t42*t45*t46*t48*t63*(2.0/3.0)+1.318309780080517E-3)+nlg2*(t51+t57+odg1*udg10)+tau1*(udg2-uhg2);
		f[2*ng+i] = nlg2*(t39+odg1*udg11+t25*t30-t42*t45*t46*t48*t71*(2.0/3.0)+1.318309780080517E-3)+nlg1*(t51+t57+odg1*udg7)+tau1*(udg3-uhg3);
		f[3*ng+i] = nlg1*(odg1*udg8+t69*uhg2+t30*t42*t45*t46*t48*t56*uhg3+t30*t42*t45*t46*t48*t63*uhg2*(2.0/3.0)-param1*t22*t42*t45*t46*t48*t72*t81*(t20*t41*udg5+t21*t29*t80*(-udg8+t21*(t22*t49*uhg2+t22*t52*uhg3)+t20*t27*udg5)))+nlg2*(odg1*udg12+t69*uhg3+t30*t42*t45*t46*t48*t56*uhg2-t30*t42*t45*t46*t48*t71*uhg3*(2.0/3.0)-param1*t22*t42*t45*t46*t48*t72*t81*(t20*t41*udg9+t21*t29*t80*(-udg12+t21*(t22*t50*uhg3+t22*t54*uhg2)+t20*t27*udg9)))+tau1*(udg4-uhg4);
>>>>>>> Stashed changes
	});
}

void KokkosFbou(dstype* f, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uhg, const dstype* nlg, const dstype* tau, const dstype* uinf, const dstype* param, const dstype time, const int modelnumber, const int ib, const int ng, const int nc, const int ncu, const int nd, const int ncx, const int nco, const int ncw)
{
	if (ib == 1)
		KokkosFbou1(f, xdg, udg, odg, wdg, uhg, nlg, tau, uinf, param, time, modelnumber, ng, nc, ncu, nd, ncx, nco, ncw);
<<<<<<< Updated upstream
=======
	else if (ib == 2)
		KokkosFbou2(f, xdg, udg, odg, wdg, uhg, nlg, tau, uinf, param, time, modelnumber, ng, nc, ncu, nd, ncx, nco, ncw);
	else if (ib == 3)
		KokkosFbou3(f, xdg, udg, odg, wdg, uhg, nlg, tau, uinf, param, time, modelnumber, ng, nc, ncu, nd, ncx, nco, ncw);
	else if (ib == 4)
		KokkosFbou4(f, xdg, udg, odg, wdg, uhg, nlg, tau, uinf, param, time, modelnumber, ng, nc, ncu, nd, ncx, nco, ncw);
	else if (ib == 5)
		KokkosFbou5(f, xdg, udg, odg, wdg, uhg, nlg, tau, uinf, param, time, modelnumber, ng, nc, ncu, nd, ncx, nco, ncw);
	else if (ib == 6)
		KokkosFbou6(f, xdg, udg, odg, wdg, uhg, nlg, tau, uinf, param, time, modelnumber, ng, nc, ncu, nd, ncx, nco, ncw);
>>>>>>> Stashed changes
}

