Using g++ compiler for CPU source code
Using nvcc compiler for GPU source code
Writing master into file...
run facenumbering...
run elementpartition...
run facepartition...
face partition 1
Writing initial solution into file 1...
Writing mesh into file 1...
Writing app into file...
Compile C++ Exasim code using cmake...
-- Enabled Kokkos devices: SERIAL;CUDA
-- kokkos_launch_compiler is enabled globally. C++ compiler commands with -DKOKKOS_DEPENDENCE will be redirected to the appropriate compiler for Kokkos
-- Configuring done
-- Generating done
-- Build files have been written to: /home/austinsp/Exasim/build
[35m[1mConsolidate compiler generated dependencies of target gpuEXASIM[0m
[ 50%] [32mBuilding CXX object CMakeFiles/gpuEXASIM.dir/home/austinsp/Exasim/backend/Main/main.cpp.o[0m
nvcc_wrapper - *warning* you have set multiple standard flags (-std=c++1* or --std=c++1*), only the last is used because nvcc can only accept a single std setting
/home/austinsp/Exasim/backend/Main/main.cpp(81): warning #550-D: variable "ncores" was set but never used

/home/austinsp/Exasim/backend/Main/main.cpp(81): warning #550-D: variable "nthreads" was set but never used

[100%] [32m[1mLinking CXX executable gpuEXASIM[0m
[100%] Built target gpuEXASIM
Run C++ Exasim code ...
/home/austinsp/Exasim/build/datain/
/home/austinsp/Exasim/build/dataout/out
Using 1 processors to solve the problem on GPU platform...
Available GPU Memory: 12277841920 Total GPU Memory: 12641632256
Reading data from binary files 
Reading app from binary files 
Reading master from binary files 
Reading mesh from binary files 
Reading initial solution from binary files 
Reading xdg from binary files 
compute the initial solution 
Finish reading data from binary files 
Set res struct... 
Set temp struct... 
Run IsMeshCurved... 
IsMeshCurved = 0 
Set common struct... 
Finish setting common struct... 
Precompute index arrays... 
finish cpuInit... 
finish gpuInit... 
free CPU memory 
finish compGeometry... 
finish compMassInverse... 
Init HDG Discretization ... 
Maximum number of boundary conditions = 1 
Number of boundary faces = 256 
Memory allocation ...
Finish GetFaceNodes ... 
Finish qEquation ... 
Finish hdgGetQ ... 
finish CDiscretization constructor... 
Newton Iteration: 0,  Solution Norm: 0
Newton Iteration: 0,  Residual Norm: 0.57297
hdgAssembleLinearSystem time: 2.99748 miliseconds
Old RHS Norm: 0.772775,  New RHS Norm: 0.772775
Matrix-vector product time: 1.67652 miliseconds
Applying preconditioner time: 13.6567 miliseconds
Orthgonalization time: 22.5015 miliseconds
Solution update time: 0.005383 miliseconds
GMRES time: 43.5611 miliseconds
GMRES(50) converges to the tolerance 1e-06 within  29 iterations and 0 RB dimensions
Newton Iteration: 1,  Residual Norm: 1.14201e-06
hdgAssembleLinearSystem time: 2.69741 miliseconds
Old RHS Norm: 1.142e-06,  New RHS Norm: 1.14199e-06
Matrix-vector product time: 1.75406 miliseconds
Applying preconditioner time: 13.9337 miliseconds
Orthgonalization time: 23.4243 miliseconds
Solution update time: 0.005435 miliseconds
GMRES time: 44.8187 miliseconds
GMRES(50) converges to the tolerance 1e-06 within  30 iterations and 1 RB dimensions
Newton Iteration: 2,  Residual Norm: 2.4895e-13
CDiscretization destructor is being called 
Elapsed time is 1.111238 seconds.
output/platform_gpu_GMRESortho_1_ppdegree_16.txt
