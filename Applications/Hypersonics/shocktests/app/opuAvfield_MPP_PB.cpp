template <typename T> void opuAvfield(T *f, T *xdg, T *udg, T *odg, T *wdg, T *uinf, T *param, T time, int modelnumber, int ng, int nc, int ncu, int nd, int ncx, int nco, int ncw, int nce, int npe, int ne, Mutation::Mixture *mix)
{
	for (int i = 0; i <ng; i++) {
		int j = i%npe;
		int k = (i-j)/npe;
		T param1 = param[0];
		T param15 = param[14];
		T param16 = param[15];
		T param17 = param[16];
		T param18 = param[17];
		T uinf1 = uinf[0];
		T uinf2 = uinf[1];
		T uinf3 = uinf[2];
		T xdg1 = xdg[j+npe*0+npe*ncx*k];
		T udg1 = udg[j+npe*0+npe*nc*k];
		T udg2 = udg[j+npe*1+npe*nc*k];
		T udg3 = udg[j+npe*2+npe*nc*k];
		T udg4 = udg[j+npe*3+npe*nc*k];
		T udg5 = udg[j+npe*4+npe*nc*k];
		T udg6 = udg[j+npe*5+npe*nc*k];
		T udg7 = udg[j+npe*6+npe*nc*k];
		T udg8 = udg[j+npe*7+npe*nc*k];
		T udg9 = udg[j+npe*8+npe*nc*k];
		T udg10 = udg[j+npe*9+npe*nc*k];
		T udg11 = udg[j+npe*10+npe*nc*k];
		T udg12 = udg[j+npe*11+npe*nc*k];
		T udg13 = udg[j+npe*12+npe*nc*k];
		T udg14 = udg[j+npe*13+npe*nc*k];
		T odg1 = odg[j+npe*0+npe*nco*k];
		T odg2 = odg[j+npe*1+npe*nco*k];
		T odg3 = odg[j+npe*2+npe*nco*k];
		T odg4 = odg[j+npe*3+npe*nco*k];
		T odg5 = odg[j+npe*4+npe*nco*k];
		T odg6 = odg[j+npe*5+npe*nco*k];
		T odg7 = odg[j+npe*6+npe*nco*k];
		T odg8 = odg[j+npe*7+npe*nco*k];
		T odg9 = odg[j+npe*8+npe*nco*k];

        T t1pi = 1.0/3.141592653589793;
		udg1 = udg1*(t1pi*atan(udg1*1.0E+12)+1.0/2.0)+3.182454300088011e-13;
		udg2 = udg2*(t1pi*atan(udg2*1.0E+12)+1.0/2.0)+3.182454300088011e-13;
		udg3 = udg3*(t1pi*atan(udg3*1.0E+12)+1.0/2.0)+3.182454300088011e-13;
		udg4 = udg4*(t1pi*atan(udg4*1.0E+12)+1.0/2.0)+3.182454300088011e-13;
		udg5 = udg5*(t1pi*atan(udg5*1.0E+12)+1.0/2.0)+3.182454300088011e-13;

		int nspecies = 5;
		double rho_scale = uinf[0];
		double u_scale = uinf[1];
		double rhoe_scale = uinf[2];

		double Ucons[7] = {udg1, udg2, udg3, udg4, udg5, udg6, udg7};
		double Ustate[6];
		dimensionalizeConsVars(Ucons, (double*)uinf, nspecies, 1);
		conservativeToState(Ucons, Ustate, (double*)uinf, nspecies, 1);
		double rhovec[5] = {Ustate[0],Ustate[1],Ustate[2],Ustate[3],Ustate[4]};
		double rhoe = Ustate[nspecies];
		mix->setState(rhovec, &rhoe, 0);

		uinf1 = mix->P()/rhoe_scale; // pressure
		uinf2 = mix->mixtureFrozenGamma(); // gamma
        // uinf3 = (mix->frozenThermalConductivity() / uinf[5]) / (mix->viscosity() / uinf[4]); // cp / Pr^*
        // uinf3 = 0.0;
        uinf3 = (mix->mixtureFrozenCpMass() / 1010.7825217371519) /0.9;

		T t2 = udg6*udg6;
		T t3 = uinf2*2.0;
		T t4 = uinf2+1.0;
		T t5 = 1.0/3.141592653589793;
		T t6 = -param18;
		T t7 = 1.0/param15;
		T t10 = udg8+udg9+udg10+udg11+udg12;
		T t11 = param17*1.0E+12;
		T t12 = param18*1.0E+12;
		T t13 = udg1*1.0E+12;
		T t14 = udg2*1.0E+12;
		T t15 = udg3*1.0E+12;
		T t16 = udg4*1.0E+12;
		T t17 = udg5*1.0E+12;
		T t8 = t3-2.0;
		T t9 = 1.0/t4;
		T t18 = atan(t13);
		T t19 = atan(t14);
		T t20 = atan(t15);
		T t21 = atan(t16);
		T t22 = atan(t17);
		T t23 = -t12;
		T t24 = t5*t18;
		T t25 = t5*t19;
		T t26 = t5*t20;
		T t27 = t5*t21;
		T t28 = t5*t22;
		T t29 = t24+1.0/2.0;
		T t30 = t25+1.0/2.0;
		T t31 = t26+1.0/2.0;
		T t32 = t27+1.0/2.0;
		T t33 = t28+1.0/2.0;
		T t34 = t29*udg1;
		T t35 = t30*udg2;
		T t36 = t31*udg3;
		T t37 = t32*udg4;
		T t38 = t33*udg5;
		T t39 = t34+t35+t36+t37+t38+1.591227150044006E-12;
		T t40 = 1.0/t39;
		T t41 = t40*t40;
		T t42 = t40*udg7;
		T t43 = t40*uinf1;
		T t45 = t10*t40*udg6;
		T t44 = t2*t41;
		T t46 = -t45;
		T t48 = t42*1.0E+12;
		T t49 = t43*1.0E+12;
		T t50 = -t40*(t45-udg13);
		T t51 = t42+t43-1.0E-4;
		T t53 = t40*(t45-udg13)*-1.0E+12;
		T t47 = t46+udg13;
		T t52 = t50-1.0E+4;
		T t54 = t48+t49-1.0E+8;
		T t56 = t53-1.0E+16;
		T t55 = atan(t54);
		T t57 = atan(t56);
		T t58 = t5*t55;
		T t60 = t5*t57;
		T t59 = t58+1.0/2.0;
		T t61 = t60-1.0/2.0;
		T t62 = t51*t59;
		T t63 = -t61*(t40*(t45-udg13)+1.0E+4);
		T t64 = t61*(t40*(t45-udg13)+1.0E+4);
		T t65 = t64*-1.0E+12;
		T t66 = t62+1.000000003182454E-4;
		T t68 = t63-2.0E+4;
		T t67 = t8*t9*t66;
		T t70 = t65-2.0E+16;
		T t69 = 1.0/sqrt(t67);
		T t71 = atan(t70);
		T t74 = t44+t67;
		T t72 = t5*t71;
		T t75 = sqrt(t74);
		T t73 = t72+1.0/2.0;
		T t76 = -t73*(t64+2.0E+4);
		T t77 = t64+t76+1.0E+4;
		T t78 = odg9*t7*t69*t77;
		T t79 = -t78;
		T t81 = t78*1.0E+12;
		T t80 = param17+t79;
		T t82 = -t81;
		T t83 = t11+t82;
		T t84 = atan(t83);
		T t85 = t5*t84;
		T t86 = t85-1.0/2.0;
		T t87 = t80*t86;
		T t88 = t87*1.0E+12;
		T t89 = t6+t87+3.182454300088011E-13;
		T t90 = t23+t88+3.182454300088011E-1;
		T t91 = atan(t90);
		T t92 = t5*t91;
		T t93 = t92+1.0/2.0;
		T t94 = t89*t93;
		T t95 = -t94;
		T t96 = t87+t95;
		f[j+npe*0+npe*nce*k] = odg9*param16*t7*t39*t75*t96; 		// bulk
		f[j+npe*1+npe*nce*k] = 0.0;									// shear
		f[j+npe*2+npe*nce*k] = odg9*param16*t7*t39*t75*t96*uinf3;   // kappa
		// f[j+npe*2+npe*nce*k] = 0.0;   // kappa
		f[j+npe*3+npe*nce*k] = 0.0;								// D1
		f[j+npe*4+npe*nce*k] = 0.0;								// D2
		f[j+npe*5+npe*nce*k] = 0.0;								// D3
		f[j+npe*6+npe*nce*k] = 0.0;								// D4
		f[j+npe*7+npe*nce*k] = 0.0;								// D5
	}
}

template void opuAvfield(double *, double *, double *, double *, double *, double *, double *, double, int, int, int, int, int, int, int, int, int, int, int, Mutation::Mixture *);
template void opuAvfield(float *, float *, float *, float *, float *, float *, float *, float, int, int, int, int, int, int, int, int, int, int, int, Mutation::Mixture *);
