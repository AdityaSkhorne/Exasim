template <typename T> void opuAvfield(T *f, T *xdg, T *udg, T *odg, T *wdg, T *uinf, T *param, T time, int modelnumber, int ng, int nc, int ncu, int nd, int ncx, int nco, int ncw, int nce, int npe, int ne, Mutation::Mixture *mix)
{
	// std::cout << "begin avfield" << std::endl;
	for (int i = 0; i <ng; i++) {
		int j = i%npe;
		int k = (i-j)/npe;
		T param1 = param[0];
		T param15 = param[14];
		T param16 = param[15];
		T param17 = param[16];
		T param18 = param[17];
		T xdg1 = xdg[j+npe*0+npe*ncx*k];
		T udg1 = udg[j+npe*0+npe*nc*k];
		T udg2 = udg[j+npe*1+npe*nc*k];
		T udg3 = udg[j+npe*2+npe*nc*k];
		T udg4 = udg[j+npe*3+npe*nc*k];
		T udg5 = udg[j+npe*4+npe*nc*k];
		T udg6 = udg[j+npe*5+npe*nc*k];
		T udg7 = udg[j+npe*6+npe*nc*k];
		T udg8 = udg[j+npe*7+npe*nc*k];
		T udg9 = udg[j+npe*8+npe*nc*k];
		T udg10 = udg[j+npe*9+npe*nc*k];
		T udg11 = udg[j+npe*10+npe*nc*k];
		T udg12 = udg[j+npe*11+npe*nc*k];
		T udg13 = udg[j+npe*12+npe*nc*k];
		T udg14 = udg[j+npe*13+npe*nc*k];
		T odg1 = odg[j+npe*0+npe*nco*k];
		T odg2 = odg[j+npe*1+npe*nco*k];

		T t1pi = 1.0/3.141592653589793;
		udg1 = udg1*(t1pi*atan(udg1*1.0E+3)+1.0/2.0)+3.183097800805168E-4;
		udg2 = udg2*(t1pi*atan(udg2*1.0E+3)+1.0/2.0)+3.183097800805168E-4;
		udg3 = udg3*(t1pi*atan(udg3*1.0E+3)+1.0/2.0)+3.183097800805168E-4;
		udg4 = udg4*(t1pi*atan(udg4*1.0E+3)+1.0/2.0)+3.183097800805168E-4;
		udg5 = udg5*(t1pi*atan(udg5*1.0E+3)+1.0/2.0)+3.183097800805168E-4;

		int nspecies = 5;
		double rho_scale = uinf[0];
		double u_scale = uinf[1];
		double rhoe_scale = uinf[2];

		double Ucons[7] = {udg1, udg2, udg3, udg4, udg5, udg6, udg7};
		double Ustate[6];
		dimensionalizeConsVars(Ucons, (double*)uinf, nspecies, 1);
		conservativeToState(Ucons, Ustate, (double*)uinf, nspecies);
		double rhovec[5] = {Ustate[0],Ustate[1],Ustate[2],Ustate[3],Ustate[4]};
		double rhoe = Ustate[nspecies];
		mix->setState(rhovec, &rhoe, 0);

		T uinf1 = mix->P()/rhoe_scale; // pressure
		T uinf2 = mix->mixtureFrozenGamma(); // gamma

		T t2 = uinf2*2.0;
		T t3 = uinf2+1.0;
		T t4 = uinf2*uinf2;
		T t5 = 1.0/3.141592653589793;
		T t6 = 1.0/param15;
		T t10 = udg8+udg9+udg10+udg11+udg12;
		T t11 = param17*1.0E+3;
		T t12 = udg1*1.0E+3;
		T t13 = udg2*1.0E+3;
		T t14 = udg3*1.0E+3;
		T t15 = udg4*1.0E+3;
		T t16 = udg5*1.0E+3;
		T t7 = t2-2.0;
		T t8 = 1.0/t3;
		T t9 = t4-1.0;
		T t17 = atan(t12);
		T t18 = atan(t13);
		T t19 = atan(t14);
		T t20 = atan(t15);
		T t21 = atan(t16);
		T t22 = 1.0/sqrt(t9);
		T t23 = t5*t17;
		T t24 = t5*t18;
		T t25 = t5*t19;
		T t26 = t5*t20;
		T t27 = t5*t21;
		T t28 = t23+1.0/2.0;
		T t29 = t24+1.0/2.0;
		T t30 = t25+1.0/2.0;
		T t31 = t26+1.0/2.0;
		T t32 = t27+1.0/2.0;
		T t33 = t28*udg1;
		T t34 = t29*udg2;
		T t35 = t30*udg3;
		T t36 = t31*udg4;
		T t37 = t32*udg5;
		T t38 = t33+t34+t35+t36+t37+1.591548900402584E-3;
		T t39 = 1.0/t38;
		T t40 = t39*udg7;
		T t41 = t39*uinf1;
		T t44 = t10*t39*udg6;
		T t42 = t40*1.0E+3;
		T t43 = t41*1.0E+3;
		T t45 = -t44;
		T t47 = -t39*(t44-udg13);
		T t48 = t40+t41-1.0E-4;
		T t49 = t39*(t44-udg13)*-1.0E+3;
		T t46 = t45+udg13;
		T t50 = t42+t43-1.0/1.0E+1;
		T t52 = t47-1.0E+4;
		T t54 = t49-1.0E+7;
		T t51 = atan(t50);
		T t55 = atan(t54);
		T t53 = t5*t51;
		T t57 = t5*t55;
		T t56 = t53+1.0/2.0;
		T t58 = t57-1.0/2.0;
		T t59 = t48*t56;
		T t60 = -t58*(t39*(t44-udg13)+1.0E+4);
		T t61 = t58*(t39*(t44-udg13)+1.0E+4);
		T t62 = t61*-1.0E+3;
		T t63 = t59+4.183097800805168E-4;
		T t66 = t60-1.999999968169022E+4;
		T t64 = t7*t8*t63;
		T t67 = t62-1.999999968169022E+7;
		T t65 = 1.0/sqrt(t64);
		T t68 = atan(t67);
		T t69 = t5*t68;
		T t70 = t69+1.0/2.0;
		T t71 = -t70*(t61+1.999999968169022E+4);
		T t72 = t61+t71+1.0E+4;
		T t73 = odg2*t6*t65*t72;
		T t74 = -t73;
		T t76 = t73*1.0E+3;
		T t75 = param17+t74;
		T t77 = -t76;
		T t78 = t11+t77;
		T t79 = atan(t78);
		T t80 = t5*t79;
		T t81 = t80-1.0/2.0;
		T t82 = t75*t81;
		f[j+npe*0+npe*nce*k] = odg2*param16*t6*(t39*udg6+1.0/t65)*(t82-(t5*atan(t82*1.0E+3-param18*t22*1.0E+3+3.183097800805168E-1)+1.0/2.0)*(t82-param18*t22+3.183097800805168E-4));
	}
	// std::cout << "end avfield" << std::endl;
}

template void opuAvfield(double *, double *, double *, double *, double *, double *, double *, double, int, int, int, int, int, int, int, int, int, int, int, Mutation::Mixture *);
template void opuAvfield(float *, float *, float *, float *, float *, float *, float *, float, int, int, int, int, int, int, int, int, int, int, int, Mutation::Mixture *);
